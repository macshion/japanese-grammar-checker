import{S as a,g as i}from"./config.js";class g{constructor(){this.STORAGE_KEYS=a.KEYS,this.MAX_HISTORY_ITEMS=a.MAX_HISTORY_ITEMS}async getHistory(){return new Promise(t=>{chrome.storage.local.get([i(this.STORAGE_KEYS.HISTORY)],e=>{t(e[i(this.STORAGE_KEYS.HISTORY)]||[])})})}async getApiKey(){return new Promise(t=>{chrome.storage.local.get([i(this.STORAGE_KEYS.API_KEY)],e=>{t(e[i(this.STORAGE_KEYS.API_KEY)])})})}async setApiKey(t){return new Promise(e=>{chrome.storage.local.set({[i(this.STORAGE_KEYS.API_KEY)]:t},e)})}async addToHistory(t){const e=await this.getHistory();return e.unshift({...t,timestamp:new Date().toISOString()}),e.length>this.MAX_HISTORY_ITEMS&&(e.length=this.MAX_HISTORY_ITEMS),new Promise(s=>{chrome.storage.local.set({[i(this.STORAGE_KEYS.HISTORY)]:e},()=>s(e))})}async clearHistory(){return new Promise(t=>{chrome.storage.local.remove([i(this.STORAGE_KEYS.HISTORY)],t)})}async exportHistory(){const t=await this.getHistory();return{exportDate:new Date().toISOString(),history:t}}async importHistory(t){if(!t.history||!Array.isArray(t.history))throw new Error("無効なファイル形式です。");let e=[...t.history];const s=await this.getHistory();e=[...e,...s];const r=Array.from(new Map(e.map(o=>[o.timestamp,o])).values());return r.sort((o,n)=>new Date(n.timestamp)-new Date(o.timestamp)),r.length>this.MAX_HISTORY_ITEMS&&(r.length=this.MAX_HISTORY_ITEMS),new Promise(o=>{chrome.storage.local.set({[i(this.STORAGE_KEYS.HISTORY)]:r},()=>o(r))})}async exportAllSettings(){return new Promise(t=>{chrome.storage.local.get(null,e=>{const s=i("").replace("_",""),r={};Object.keys(e).forEach(n=>{if(!s||n.startsWith(s)){const c=s?n.replace(s+"_",""):n;r[c]=e[n]}});const o={exportDate:new Date().toISOString(),settings:r};t(o)})})}async importAllSettings(t){if(!t.settings||typeof t.settings!="object")throw new Error("無効なファイル形式です。");const e=i("").replace("_",""),s={};return Object.keys(t.settings).forEach(r=>{const o=e?`${e}_${r}`:r;s[o]=t.settings[r]}),new Promise(r=>{chrome.storage.local.set(s,()=>{r(!0)})})}}export{g as S};
