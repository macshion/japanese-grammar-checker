import{S as s}from"./storage.js";import"./config.js";class g{constructor(){this.storageService=new s}async exportSettings(){try{const t=await this.storageService.exportAllSettings(),r=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),o=URL.createObjectURL(r),e=document.createElement("a");return e.href=o,e.download=`japanese-grammar-checker-settings-${new Date().toISOString().split("T")[0]}.json`,document.body.appendChild(e),e.click(),setTimeout(()=>{document.body.removeChild(e),URL.revokeObjectURL(o)},100),!0}catch(t){throw console.error("Failed to export settings:",t),t}}async importSettings(t){try{return new Promise((r,o)=>{const e=new FileReader;e.onload=async n=>{try{const a=JSON.parse(n.target.result);await this.storageService.importAllSettings(a),r(!0)}catch(a){o(a)}},e.onerror=()=>{o(new Error("ファイルの読み込みに失敗しました。"))},e.readAsText(t)})}catch(r){throw console.error("Failed to import settings:",r),r}}triggerImportDialog(){const t=document.createElement("input");t.type="file",t.accept="application/json",t.onchange=async r=>{if(r.target.files&&r.target.files.length>0){const o=r.target.files[0];try{await this.importSettings(o),alert("設定がインポートされました。アプリを再起動してください。")}catch(e){alert(`設定のインポートに失敗しました: ${e.message}`)}}},t.click()}}export{g as S};
