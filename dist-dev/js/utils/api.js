import{A as a,g as n,S as c,a as o}from"./config.js";class h{constructor(){this.API_ENDPOINT=a.ENDPOINT,this.MODEL_CONFIG=a.MODEL_CONFIG}async getApiKey(){return new Promise(s=>{chrome.storage.local.get([n(c.KEYS.API_KEY)],e=>{s(e[n(c.KEYS.API_KEY)])})})}async makeRequest(s){const e=await this.getApiKey();if(!e)throw new Error("APIキーが設定されていません。");try{const t=await(await fetch(this.API_ENDPOINT,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({...this.MODEL_CONFIG,messages:s})})).json();if(t.error)throw new Error(t.error.message);return t.choices[0].message.content}catch(r){throw new Error(`API呼び出しエラー: ${r.message}`)}}async checkGrammar(s){const e=[{role:"system",content:o.GRAMMAR_CHECK},{role:"user",content:s}];return this.makeRequest(e)}async translate(s,e,r){const t=[{role:"system",content:o.TRANSLATION+`
${e}から${r}に翻訳してください。`},{role:"user",content:s}];return this.makeRequest(t)}async chat(s){const e=[{role:"system",content:o.AI_CHAT},{role:"user",content:s}];return this.makeRequest(e)}}export{h as A};
